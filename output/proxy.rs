// Code generated by the multiversx-sc proxy generator. DO NOT EDIT.

////////////////////////////////////////////////////
////////////////// AUTO-GENERATED //////////////////
////////////////////////////////////////////////////

#![allow(dead_code)]
#![allow(clippy::all)]

use multiversx_sc::proxy_imports::*;

pub struct VotingSystemV1Proxy;

impl<Env, From, To, Gas> TxProxyTrait<Env, From, To, Gas> for VotingSystemV1Proxy
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    type TxProxyMethods = VotingSystemV1ProxyMethods<Env, From, To, Gas>;

    fn proxy_methods(self, tx: Tx<Env, From, To, (), Gas, (), ()>) -> Self::TxProxyMethods {
        VotingSystemV1ProxyMethods { wrapped_tx: tx }
    }
}

pub struct VotingSystemV1ProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    wrapped_tx: Tx<Env, From, To, (), Gas, (), ()>,
}

#[rustfmt::skip]
impl<Env, From, Gas> VotingSystemV1ProxyMethods<Env, From, (), Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    Gas: TxGas<Env>,
{
    pub fn init(
        self,
    ) -> TxTypedDeploy<Env, From, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_deploy()
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> VotingSystemV1ProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn create_campaign<
        Arg0: ProxyArg<u64>,
    >(
        self,
        num_options: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("createCampaign")
            .argument(&num_options)
            .original_result()
    }

    pub fn vote<
        Arg0: ProxyArg<u64>,
        Arg1: ProxyArg<u64>,
    >(
        self,
        campaign: Arg0,
        option: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("vote")
            .argument(&campaign)
            .argument(&option)
            .original_result()
    }

    pub fn get_all_campaigns(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedVec<Env::Api, VotingCampaignView<Env::Api>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getAllCampaigns")
            .original_result()
    }

    pub fn get_total_options<
        Arg0: ProxyArg<u64>,
    >(
        self,
        campaign_id: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedVec<Env::Api, Vote<Env::Api>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getVotesForCampaign")
            .argument(&campaign_id)
            .original_result()
    }

    pub fn get_vote_count<
        Arg0: ProxyArg<u64>,
        Arg1: ProxyArg<u64>,
    >(
        self,
        campaign_id: Arg0,
        option: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, u64> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getVoteCount")
            .argument(&campaign_id)
            .argument(&option)
            .original_result()
    }
}

#[type_abi]
#[derive(Debug, NestedEncode, NestedDecode, TopEncode, TopDecode, Clone, ManagedVecItem)]
pub struct VotingCampaignView<Api>
where
    Api: ManagedTypeApi,
{
    pub campaign_id: u64,
    pub owner: ManagedAddress<Api>,
    pub num_options: u64,
}

#[type_abi]
#[derive(Debug, NestedEncode, NestedDecode, TopEncode, TopDecode, Clone, ManagedVecItem)]
pub struct Vote<Api>
where
    Api: ManagedTypeApi,
{
    pub voter: ManagedAddress<Api>,
    pub option: u64,
}
